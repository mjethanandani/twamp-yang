<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3432 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3432.xml">
<!ENTITY RFC4086 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4086.xml">
<!ENTITY RFC4656 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4656.xml">
<!ENTITY RFC5357 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5357.xml">
<!ENTITY RFC6020 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6020.xml">
<!ENTITY RFC6038 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6038.xml">
<!ENTITY RFC6241 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6241.xml">
<!ENTITY RFC7426 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7426.xml">
<!ENTITY IPPMREG SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-ippm-metric-registry-02.xml">
<!ENTITY RESTCONF SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-netconf-restconf-04.xml">
<!ENTITY UNIFY SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-unify-nfvrg-challenges-00.xml">
<!ENTITY SP-DEVOPS SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-unify-nfvrg-devops-01.xml">
]>
<rfc category="std" docName="draft-ietf-ippm-twamp-yang-11" ipr="trust200902">
  <?rfc toc="yes" ?>

  <?rfc symrefs="yes" ?>

  <?rfc sortrefs="yes"?>

  <?rfc iprnotified="no" ?>

  <?rfc strict="yes" ?>

  <?rfc compact="yes" ?>

  <?rfc subcompact="no" ?>

  <?rfc comments="yes"?>

  <?rfc inline="yes" ?>

  <front>
    <title abbrev="TWAMP YANG Data Model">Two-Way Active Measurement Protocol
    (TWAMP) Data Model</title>

    <author fullname="Ruth Civil" initials="R." surname="Civil">
      <organization>Ciena Corporation</organization>

      <address>
        <postal>
          <street>307 Legget Drive</street>

          <city>Kanata</city>

          <region>ON</region>

          <code>K2K 3C8</code>

          <country>Canada</country>
        </postal>

        <email>gcivil@ciena.com</email>

        <uri>www.ciena.com</uri>
      </address>
    </author>

    <author fullname="Al Morton" initials="A." surname="Morton">
      <organization>AT&amp;T Labs</organization>

      <address>
        <postal>
          <street>200 Laurel Avenue South</street>

          <city>Middletown,</city>

          <region>NJ</region>

          <code>07748</code>

          <country>USA</country>
        </postal>

        <phone>+1 732 420 1571</phone>

        <facsimile>+1 732 368 1192</facsimile>

        <email>acmorton@att.com</email>

        <uri/>
      </address>
    </author>

    <author fullname="Reshad Rahman" initials="R." surname="Rahman">
      <organization>Cisco Systems</organization>

      <address>
        <postal>
          <street>2000 Innovation Drive</street>

          <city>Kanata</city>

          <region>ON</region>

          <code>K2K 3E8</code>

          <country>Canada</country>
        </postal>

        <email>rrahman@cisco.com</email>
      </address>
    </author>

    <author fullname="Mahesh Jethanandani" initials="M."
            surname="Jethanandani">
      <organization/>

      <address>
        <postal>
          <street/>

          <city/>

          <region/>

          <code/>

          <country/>
        </postal>

        <email>mjethanandani@gmail.com</email>
      </address>
    </author>

    <author fullname="Kostas Pentikousis" initials="K." role="editor"
            surname="Pentikousis">
      <organization>Travelping</organization>

      <address>
        <postal>
          <street>Siemensdamm 50</street>

          <code>13629</code>

          <city>Berlin</city>

          <country>Germany</country>
        </postal>

        <email>k.pentikousis@travelping.com</email>
      </address>
    </author>

    <date day="25" month="May" year="2018"/>

    <area>Transport</area>

    <workgroup>IPPM WG</workgroup>

    <abstract>
      <t>This document specifies a data model for client and server
      implementations of the Two-Way Active Measurement Protocol (TWAMP). The
      document defines the TWAMP data model through Unified Modeling Language
      (UML) class diagrams and formally specifies it using YANG.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>The <xref target="RFC5357">Two-Way Active Measurement Protocol
      (TWAMP) </xref> is used to measure network performance parameters such
      as latency, bandwidth, and packet loss by sending probe packets and
      measuring their experience in the network. To date, TWAMP
      implementations do not come with a standard management framework, and,
      as such, implementors have no choice except to provide a proprietary
      mechanism. This document addresses this gap by formally specifying the
      TWAMP data model using <xref target="RFC7950">YANG 1.1 </xref>.</t>

      <section anchor="motivation" title="Motivation">
        <t>In current TWAMP deployments the lack of a standardized data model
        limits the flexibility to dynamically instantiate TWAMP-based
        measurements across equipment from different vendors. In large,
        virtualized, and dynamically instantiated infrastructures where
        network functions are placed according to orchestration algorithms as
        discussed in <xref target="I-D.unify-nfvrg-challenges">Unifying
        Carrier and Cloud Networks: Problem Statement and Challenges </xref>,
        and <xref target="I-D.unify-nfvrg-devops"> DevOps For Software-Defined
        Telecom Infrastructures </xref>, proprietary mechanisms for managing
        TWAMP measurements pose severe limitations with respect to
        programmability.</t>

        <t>Two major trends call for standardizing TWAMP management aspects.
        First, it is expected that in the coming years large-scale and
        multi-vendor TWAMP deployments will become the norm. From an
        operations perspective, using several vendor-specific TWAMP
        configuration mechanisms when one standard mechanism could provide an
        alternative is expensive and inefficient. Second, the increasingly
        software-defined and virtualized nature of network infrastructures,
        based on dynamic service chains <xref target="NSC"/> and programmable
        control and management planes <xref target="RFC7426">Software-Defined
        Networking (SDN): Layers and Architecture Terminology </xref> requires
        a well-defined data model for TWAMP implementations. This document
        defines such a TWAMP data model and specifies it formally using the
        <xref target="RFC7950">YANG 1.1 </xref> data modeling language.</t>

        <t>Note to RFC Editor:</t>

        <t>Please replace the date YYYY-MM-DD in Section 5.2 of the draft with
        the date of publication of this draft as a RFC. Also, replace
        reference to RFC XXXX, and draft-ietf-ippm-port-twamp-test with the
        RFC numbers assigned to the drafts.</t>
      </section>

      <section title="Terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
        "OPTIONAL" in this document are to be interpreted as described in
        <xref target="RFC2119">BCP 14</xref> <xref target="RFC8174"/> when,
        and only when, they appear in all capitals, as shown here.</t>
      </section>

      <section title="Document Organization">
        <t>The rest of this document is organized as follows. <xref
        target="scope"/> presents the scope and applicability of this
        document. <xref target="structure"/> provides a high-level overview of
        the TWAMP data model. <xref target="parameters"/> details the
        configuration parameters of the data model and <xref target="module"/>
        specifies in YANG the TWAMP data model. <xref target="examples"/>
        lists illustrative examples which conform to the YANG data model
        specified in this document. <xref target="AuthExample"/> elaborates
        these examples further.</t>
      </section>
    </section>

    <section anchor="scope" title="Scope, Model, and Applicability">
      <t>The purpose of this document is the specification of a
      vendor-independent data model for TWAMP implementations.</t>

      <t><xref target="fig:scope"/> illustrates a redrawn version of the TWAMP
      logical model found in Section 1.2 of <xref target="RFC5357">TWAMP
      </xref>. The figure is annotated with pointers to the UML diagrams
      provided in this document and associated with the data model of the four
      logical entities in a TWAMP deployment, namely the TWAMP Control-Client,
      Server, Session-Sender and Session-Reflector.</t>

      <t>As per <xref target="RFC5357">TWAMP </xref>, unlabeled links in <xref
      target="fig:scope"/> are left unspecified and may be proprietary
      protocols.</t>

      <figure anchor="fig:scope" title="Annotated TWAMP logical model">
        <artwork><![CDATA[
    [Fig. 3]                                 [Fig. 4]
+----------------+                          +--------+
| Control-Client |  <-- TWAMP-Control -->   | Server |
+----------------+                          +--------+ 
        ^                                        ^
        |                                        |
        V                                        V
+----------------+                     +-------------------+
| Session-Sender |  <-- TWAMP-Test --> | Session-Reflector |
+----------------+                     +-------------------+
    [Fig. 5]                                 [Fig. 6]
]]></artwork>
      </figure>

      <t>As per <xref target="RFC5357">TWAMP </xref>, a TWAMP implementation
      may follow a simplified logical model, in which the same node acts both
      as Control-Client and Session-Sender, while another node acts at the
      same time as TWAMP Server and Session-Reflector. <xref
      target="fig:scope2"/> illustrates this simplified logical model and
      indicates the interaction between the TWAMP configuration client and
      server using, for instance, <xref target="RFC6241">NETCONF </xref> or
      <xref target="RFC8040">RESTCONF </xref>.</t>

      <figure anchor="fig:scope2" title="Simplified TWAMP model and protocols">
        <artwork><![CDATA[
o-------------------o                       o-------------------o
|   Config client   |                       |   Config client   |
o-------------------o                       o-------------------o
         ||                                          ||
 NETCONF || RESTCONF                         NETCONF || RESTCONF
         ||                                          ||
o-------------------o                       o-------------------o
|   Config server   |                       |   Config server   |
|    [Fig. 3, 5]    |                       |    [Fig. 4, 6]    |
+-------------------+                       +-------------------+
|   Control-Client  | <-- TWAMP-Control --> |      Server       |
|                   |                       |                   |
|   Session-Sender  |  <-- TWAMP-Test -->   | Session-Reflector |
+-------------------+                       +-------------------+
]]></artwork>
      </figure>

      <t>The data model defined in this document is orthogonal to the specific
      protocol used between the Config client and Config server to communicate
      the TWAMP configuration parameters.</t>

      <t>Operational actions such as how TWAMP-Test sessions are started and
      stopped, how performance measurement results are retrieved, or how
      stored results are cleared, and so on, are not addressed by the
      configuration model defined in this document. As noted above, such
      operational actions are not part of the TWAMP specification <xref
      target="RFC5357">TWAMP </xref> and hence are out of scope of this
      document. See also <xref target="OperationalCommands"/>.</t>
    </section>

    <section anchor="structure" title="Data Model Overview">
      <t>The TWAMP data model includes four categories of configuration
      items.</t>

      <t>First, global configuration items relate to parameters that are set
      on a per device level. For example, the administrative status of the
      device with respect to whether it allows TWAMP sessions and, if so, in
      what capacity (e.g. Control-Client, Server or both), is a typical
      instance of a global configuration item.</t>

      <t>A second category includes attributes that can be configured on a per
      TWAMP-Control connection basis, such as the Server IP address.</t>

      <t>A third category includes attributes related to per TWAMP-Test
      session attributes, for instance setting different values in the
      Differentiated Services Code Point (DSCP) field.</t>

      <t>Finally, the data model includes attributes that relate to the
      operational state of the TWAMP implementation.</t>

      <t>As the TWAMP data model is described in the remaining sections of
      this document, readers should keep in mind the functional entity
      grouping illustrated in <xref target="fig:scope"/>.</t>

      <section anchor="twamp-client" title="Control-Client">
        <t>A TWAMP Control-Client has an administrative status field set at
        the device level that indicates whether the node is enabled to
        function as such.</t>

        <t>Each TWAMP Control-Client is associated with zero or more
        TWAMP-Control connections. The main configuration parameters of each
        control connection are: <list style="symbols">
            <t>A name which can be used to uniquely identify at the
            Control-Client a particular control connection. This name is
            necessary for programmability reasons because at the time of
            creation of a TWAMP-Control connection not all IP and TCP port
            number information needed to uniquely identify the connection is
            available.</t>

            <t>The IP address of the interface the Control-Client will use for
            connections.</t>

            <t>The IP address of the remote TWAMP Server.</t>

            <t>Authentication and encryption attributes such as KeyID, Token
            and the Client Initialization Vector (Client-IV); see also the
            last paragraph of Section 6 in <xref target="RFC4656">OWAMP
            </xref> and <xref target="RFC4086">Randomness Requirements for
            Security </xref>.</t>
          </list></t>

        <t>Each TWAMP-Control connection, in turn, is associated with zero or
        more TWAMP-Test sessions. For each test session, the following
        configuration items should be noted: <list style="symbols">
            <t>The test session name that uniquely identifies a particular
            test session at the Control-Client and Session-Sender. Similarly
            to the control connections above, this unique test session name is
            needed because at the time of creation of a TWAMP-Test session,
            for example, the source UDP port number is not known to uniquely
            identify the test session.</t>

            <t>The IP address and UDP port number of the Session-Sender on the
            path under test by TWAMP.</t>

            <t>The IP address and UDP port number of the Session-Reflector on
            said path.</t>

            <t>Information pertaining to the test packet stream, such as the
            test starting time, which performance metric is to be used <xref
            target="I-D.ietf-ippm-metric-registry">Registry for Performance
            Metrics </xref>, or whether the test should be repeated.</t>
          </list></t>
      </section>

      <section anchor="twamp-server" title="Server">
        <t>Each TWAMP Server has an administrative status field set at the
        device level to indicate whether the node is enabled to function as a
        TWAMP Server.</t>

        <t>Each Server is associated with zero or more TWAMP-Control
        connections. Each control connection is uniquely identified by the
        4-tuple {Control-Client IP address, Control-Client TCP port number,
        Server IP address, Server TCP port}. Control connection configuration
        items on a TWAMP Server are read-only.</t>
      </section>

      <section anchor="twampSender" title="Session-Sender">
        <t>A TWAMP Session-Sender has an administrative status field set at
        the device level that indicates whether the node is enabled to
        function as such.</t>

        <t>There is one Session-Sender instance for each TWAMP-Test session
        that is initiated from the sending device. Primary configuration
        fields include: <list style="symbols">
            <t>The test session name that MUST be identical with the
            corresponding test session name on the TWAMP Control-Client (<xref
            target="twamp-client"/>).</t>

            <t>The control connection name, which along with the test session
            name uniquely identify the TWAMP Session-Sender instance.</t>

            <t>Information pertaining to the test packet stream, such as, for
            example, the number of test packets and the packet distribution to
            be employed; see also <xref target="RFC3432">Network performence
            measurement with periodic streams </xref>.</t>
          </list></t>
      </section>

      <section anchor="twampReflector" title="Session-Reflector">
        <t>Each TWAMP Session-Reflector has an administrative status field set
        at the device level to indicate whether the node is enabled to
        function as such.</t>

        <t>Each Session-Reflector is associated with zero or more TWAMP-Test
        sessions. For each test session, the REFWAIT timeout parameter which
        determines whether to discontinue the session if no packets have been
        received (<xref target="RFC5357">TWAMP </xref>, Section 4.2) can be
        configured.</t>

        <t>Read-only access to other data model parameters, such as the Sender
        IP address is foreseen. Each test session can be uniquely identified
        by the 4-tuple mentioned in <xref target="twamp-server"/>.</t>
      </section>
    </section>

    <section anchor="parameters" title="Data Model Parameters">
      <t>This section defines the TWAMP data model using UML and introduces
      selected parameters associated with the four TWAMP logical entities. The
      complete TWAMP data model specification is provided in the YANG module
      presented in <xref target="yangmodule"/>.</t>

      <section anchor="clientConfig" title="Control-Client">
        <t>The client container (see <xref target="fig:twamp-client"/>) holds
        items that are related to the configuration of the TWAMP
        Control-Client logical entity (recall <xref target="fig:scope"/>).</t>

        <t>The client container includes an administrative configuration
        parameter (client/admin-state) that indicates whether the device is
        allowed to initiate TWAMP-Control connections.</t>

        <figure anchor="fig:twamp-client"
                title="TWAMP Control-Client UML class diagram">
          <artwork><![CDATA[
+-------------+
| client      |
+-------------+                   1..* +-----------------------+
| admin-state |<>----------------------| mode-preference-chain |
|             |                        +-----------------------+
|             |  1..* +------------+   | priority              |
|             |<>-----| key-chain  |   | mode                  |
+-------------+       +------------+   +-----------------------+
       ^              | key-id     |
       V              | secret-key |
       |              +------------+
       | 0..*
+------------------------+
| ctrl-connection        |
+------------------------+
| name                   |
| client-ip              |
| server-ip              |
| server-tcp-port        |    0..* +----------------------+
| control-packet-dscp    |<>-------| test-session-request |
| key-id                 |         +----------------------+
| max-count              |         | name                 |
| client-tcp-port   {ro} |         | sender-ip            |
| server-start-time {ro} |         | sender-udp-port      |
| state             {ro} |         | reflector-ip         |
| selected-mode     {ro} |         | reflector-udp-port   |
| token             {ro} |         | timeout              |
| client-iv         {ro} |         | padding-length       |
+------------------------+         | test-packet-dscp     |
                                   | start-time           |
            +-------------+ 1      | repeat               |
            | pm-reg-list |------<>| repeat-interval      |
            +-------------+        | state           {ro} |
            | pm-index    |        | sid             {ro} |
            +-------------+        +----------------------+
]]></artwork>
        </figure>

        <t>The client container holds a list (mode-preference-chain) which
        specifies the Mode values according to their preferred order of use by
        the operator of this Control-Client, including the authentication and
        encryption Modes. Specifically, mode-preference-chain lists the mode
        and its corresponding priority, expressed as a 16-bit unsigned
        integer, where zero is the highest priority and subsequent integers
        increase by one.</t>

        <t>Depending on the Modes available in the Server Greeting, the
        Control-Client MUST choose the highest priority Mode from the
        configured mode-preference-chain list.</t>

        <t>Note that the list of preferred Modes may set bit position
        combinations when necessary, such as when referring to the extended
        TWAMP features in <xref target="RFC5618">Mixed Security Mode for TWAMP
        </xref>, <xref target="RFC5938">Individual Session Control Feature for
        TWAMP </xref>, <xref target="RFC6038">TWAMP Reflect Octets and
        Symmetrical Size Features </xref>, and <xref
        target="RFC7717">IKEv2-Derived Shared Secret Key for OWAMP and TWAMP
        </xref>. If the Control-Client cannot determine an acceptable Mode, it
        MUST respond with zero Mode bits set in the Set-up Response message,
        indicating it will not continue with the control connection.</t>

        <t>In addition, the client container holds a list named key-chain
        which relates KeyIDs with the respective secret keys. Both the Server
        and the Control-Client use the same mappings from KeyIDs to shared
        secrets (key-id and secret-key in <xref target="fig:twamp-client"/>,
        respectively). The Server, being prepared to conduct sessions with
        more than one Control-Client, uses KeyIDs to choose the appropriate
        secret-key; a Control-Client would typically have different secret
        keys for different Servers. The secret-key is the shared secret, a
        sequence of octets of arbitrary length whose interpretation is
        unspecified. The key-id and secret-key encoding SHOULD follow Section
        9.4 of <xref target="RFC7950">YANG </xref>. The derived key length
        (dkLen in <xref target="RFC8018">PKCS #5: Password-Based Cryptography
        Specification Version 2.1 </xref>) MUST be 16 octets for the AES
        Session-key used for encryption and 32 octets for the HMAC-SHA1
        Session-key used for authentication; see also Section 6.10 of <xref
        target="RFC4656">OWAMP </xref>.</t>

        <t>Each client container also holds a list of control connections,
        where each item in the list describes a TWAMP control connection
        initiated by this Control-Client. There SHALL be one ctrl-connection
        per TWAMP-Control (TCP) connection that is to be initiated from this
        device.</t>

        <t>In turn, each ctrl-connection holds a list of test-session-request.
        test-session-request holds information associated with the
        Control-Client for this test session. This includes information
        associated with the Request-TW-Session/Accept-Session message exchange
        (see Section 3.5 of <xref target="RFC5357">TWAMP </xref>).</t>

        <t>There SHALL be one instance of test-session-request for each
        TWAMP-Test session that is to be negotiated by this TWAMP-Control
        connection via a Request-TW-Session/Accept-Session exchange.</t>

        <t>The Control-Client is also responsible for scheduling TWAMP-Test
        sessions so test-session-request holds information related to these
        actions (e.g. pm-index, repeat-interval).</t>
      </section>

      <section anchor="serverConfig" title="Server">
        <t>The server container (see <xref target="fig:twamp-server"/>) holds
        items that are related to the configuration of the TWAMP Server
        logical entity (recall <xref target="fig:scope"/>).</t>

        <t>The server container includes an administrative configuration
        parameter (server/admin-state) that indicates whether the device is
        allowed to receive TWAMP-Control connections.</t>

        <t>A device operating in the Server role cannot configure attributes
        on a per TWAMP-Control connection basis, as it has no foreknowledge of
        the incoming TWAMP-Control connections to be received. Consequently,
        any parameter that the Server might want to apply to an incoming
        control connection must be configured at the overall Server level and
        applied to all incoming TWAMP-Control connections.</t>

        <figure anchor="fig:twamp-server"
                title="TWAMP Server UML class diagram">
          <artwork><![CDATA[
+---------------------+
| server              |
+---------------------+
| admin-state         |   1..* +------------+
| server-tcp-port     |<>------| key-chain  |
| servwait            |        +------------+
| control-packet-dscp |        | key-id     |
| count               |        | secret-key |
| max-count           |        +------------+
| modes               |
|                     |   0..* +--------------------------+
|                     |<>------| ctrl-connection          |
+---------------------+        +--------------------------+
                               | client-ip           {ro} |                            
                               | client-tcp-port     {ro} |
                               | server-ip           {ro} |
                               | server-tcp-port     {ro} |
                               | state               {ro} |
                               | control-packet-dscp {ro} |
                               | selected-mode       {ro} |
                               | key-id              {ro} |
                               | count               {ro} |
                               | max-count           {ro} |
                               | salt                {ro} | 
                               | server-iv           {ro} |
                               | challenge           {ro} |
                               +--------------------------+
]]></artwork>
        </figure>

        <t>Each server container holds a list named key-chain which relates
        KeyIDs with the respective secret keys. As mentioned in <xref
        target="clientConfig"/>, both the Server and the Control-Client use
        the same mappings from KeyIDs to shared secrets. The Server, being
        prepared to conduct sessions with more than one Control-Client, uses
        KeyIDs to choose the appropriate secret-key; a Control-Client would
        typically have different secret keys for different Servers. key-id
        tells the Server which shared-secret the Control-Client wishes to use
        for authentication or encryption.</t>

        <t>Each incoming control connection active on the Server is
        represented by a ctrl-connection. There SHALL be one ctrl-connection
        per incoming TWAMP-Control (TCP) connection that is received and
        active on the Server. Each ctrl-connection can be uniquely identified
        by the 4-tuple {client-ip, client-tcp-port, server-ip,
        server-tcp-port}. All items in the ctrl-connection list are
        read-only.</t>
      </section>

      <section anchor="senderConfig" title="Session-Sender">
        <t>The session-sender container, illustrated in <xref
        target="fig:twampSenders"/>, holds items that are related to the
        configuration of the TWAMP Session-Sender logical entity.</t>

        <t>The session-sender container includes an administrative parameter
        (session-sender/admin-state) that controls whether the device is
        allowed to initiate TWAMP-Test sessions.</t>

        <figure anchor="fig:twampSenders"
                title="TWAMP Session-Sender UML class diagram">
          <artwork><![CDATA[
+----------------+
| session-sender |
+----------------+  0..* +---------------------------+
| admin-state    |<>-----| test-session              |
+----------------+       +---------------------------+
                         | name                      |
                         | ctrl-connection-name {ro} |
                         | fill-mode                 |
                         | number-of-packets         |
                         | state {ro}                |
                         | sent-packets         {ro} |
                         | rcv-packets          {ro} |
                         | last-sent-seq        {ro} |
                         | last-rcv-seq         {ro} |
                         +---------------------------+
                                      ^
                                      V
                                      | 1
                          +---------------------+
                          | packet-distribution |
                          +---------------------+
                          | periodic /  poisson |
                          +---------------------+
                              |           |
                   +-------------------+  |
                   | periodic-interval |  | 
                   +-------------------+  |
                                          |
                                  +--------------+
                                  | lambda       | 
                                  | max-interval |
                                  +--------------+
]]></artwork>
        </figure>

        <t>Each TWAMP-Test session initiated by the Session-Sender will be
        represented by an instance of a test-session object. There SHALL be
        one instance of test-session for each TWAMP-Test session for which
        packets are being sent.</t>
      </section>

      <section anchor="reflectorConfig" title="Session-Reflector">
        <t>The session-reflector container, illustrated in <xref
        target="fig:twampReflector"/>, holds items that are related to the
        configuration of the TWAMP Session-Reflector logical entity.</t>

        <t>The session-reflector container includes an administrative
        parameter (session-reflector/admin-state) that controls whether the
        device is allowed to respond to incoming TWAMP-Test sessions.</t>

        <t>A device operating in the Session-Reflector role cannot configure
        attributes on a per-session basis, as it has no foreknowledge of what
        incoming sessions it will receive. As such, any parameter that the
        Session-Reflector might want to apply to an incoming TWAMP-Test
        session must be configured at the overall Session-Reflector level and
        are applied to all incoming sessions.</t>

        <figure anchor="fig:twampReflector"
                title="TWAMP Session-Reflector UML class diagram">
          <artwork><![CDATA[
+----=--------------+
| session-reflector |
+-------------------+
| admin-state       |
| refwait           |
+-------------------+
         ^
         V
         |
         | 0..*
+----------------------------------------+
| test-session                           |
+----------------------------------------+
| sid                               {ro} |
| sender-ip                         {ro} |
| sender-udp-port                   {ro} |
| reflector-ip                      {ro} |
| reflector-udp-port                {ro} |
| parent-connection-client-ip       {ro} |
| parent-connection-client-tcp-port {ro} |
| parent-connection-server-ip       {ro} |
| parent-connection-server-tcp-port {ro} |
| test-packet-dscp                  {ro} |
| sent-packets                      {ro} |
| rcv-packets                       {ro} |
| last-sent-seq                     {ro} |
| last-rcv-seq                      {ro} |
+----------------------------------------+
]]></artwork>
        </figure>

        <t>Each incoming TWAMP-Test session that is active on the
        Session-Reflector SHALL be represented by an instance of a
        test-session object. All items in the test-session object are
        read-only.</t>

        <t>Instances of test-session are indexed by a session identifier
        (sid). This value is auto-allocated by the TWAMP Server as test
        session requests are received, and communicated back to the
        Control-Client in the SID field of the Accept-Session message; see
        Section 4.3 of <xref target="RFC6038">TWAMP Reflect Octets and
        Symmetrical Size Features </xref>.</t>

        <t>When attempting to retrieve operational data for active test
        sessions from a Session-Reflector device, the user will not know what
        sessions are currently active on that device, or what SIDs have been
        auto-allocated for these test sessions. If the user has network access
        to the Control-Client device, then it is possible to read the data for
        this session under client/ctrl-connection/test-session-request/sid and
        obtain the SID (see <xref target="fig:twamp-client"/>). The user may
        then use this SID value as an index to retrieve an individual
        session-reflector/test-session instance on the Session-Reflector
        device.</t>

        <t>If the user has no network access to the Control-Client device,
        then the only option is to retrieve all test-session instances from
        the Session-Reflector device, and then pick out specific test-session
        instances of interest to the user. This could be problematic if a
        large number of test sessions are currently active on that device.</t>

        <t>Each Session-Reflector TWAMP-Test session contains the following
        4-tuple: {parent-connection-client-ip,
        parent-connection-client-tcp-port, parent-connection-server-ip,
        parent-connection-server-tcp-port}. This 4-tuple MUST correspond to
        the equivalent 4-tuple {client-ip, client-tcp-port, server-ip,
        server-tcp-port} in server/ctrl-connection. This 4-tuple allows the
        user to trace back from the TWAMP-Test session to the (parent)
        TWAMP-Control connection that negotiated this test session.</t>
      </section>
    </section>

    <section anchor="module" title="Data Model">
      <t>This section formally specifies the TWAMP data model using YANG.</t>

      <section anchor="yangtree" title="YANG Tree Diagram">
        <t>This section presents a simplified graphical representation of the
        TWAMP data model using a YANG tree diagram. Readers should keep in
        mind that the limit of 72 characters per line forces us to introduce
        artificial line breaks in some tree diagram nodes. Tree diagrams used
        in this document follow the notation defined in <xref
        target="RFC8340">YANG Tree Diagrams</xref>.</t>

        <figure anchor="fig:yangtree" title="YANG Tree Diagram.">
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/ietf-twamp@YYYY-MM-DD-tree.txt)
             ]]></artwork>
        </figure>
      </section>

      <section anchor="yangmodule" title="YANG Module">
        <t>This section presents the YANG module for the TWAMP data model
        defined in this document. The module imports definitions from <xref
        target="RFC6991">Common YANG Data Types</xref>, and references <xref
        target="RFC1305">NTPv3 Specification</xref>, <xref
        target="RFC2330">Framework for IP Performance Metrics</xref>, <xref
        target="RFC4086">Randomness Requirements for Security</xref>, <xref
        target="RFC4656">OWAMP</xref>, <xref target="RFC5357">TWAMP</xref>,
        <xref target="RFC5618">More Features for TWAMP</xref>, <xref
        target="RFC5938">Individual Session Control Feature</xref>, <xref
        target="RFC6038">TWAMP Reflect Octets and Symmetrical Size
        Features</xref>, <xref target="RFC7312">Advances Stream and Sampling
        Framework</xref>, <xref target="RFC7717">IKEv2-Derived Shared Secret
        Key for OWAMP and TWAMP</xref>, and <xref
        target="I-D.ietf-ippm-port-twamp-test">OWAMP and TWAMP Well-Known Port
        Assignments</xref>.</t>

        <figure>
          <artwork><![CDATA[
<CODE BEGINS> file "ietf-twamp@YYYY-MM-DD.yang"

INSERT_TEXT_FROM_FILE(../src/yang/ietf-twamp@YYYY-MM-DD.yang)

<CODE ENDS>
]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="examples" title="Data Model Examples">
      <t>This section presents a simple but complete example of configuring
      all four entities in <xref target="fig:scope"/>, based on the YANG
      module specified in <xref target="module"/>. The example is illustrative
      in nature, but aims to be self-contained, i.e. were it to be executed in
      a real TWAMP implementation it would lead to a correctly configured test
      session. For completeness, examples are provided for both IPv4 and
      IPv6.</t>

      <t>A more elaborated example, which also includes authentication
      parameters, is provided in <xref target="AuthExample"/>.</t>

      <section anchor="ExampleCC" title="Control-Client">
        <t><xref target="fig:ExampleCC"/> shows a configuration example for a
        Control-Client with client/admin-state enabled. In a real
        implementation following <xref target="fig:scope2"/> this would permit
        the initiation of TWAMP-Control connections and TWAMP-Test
        sessions.</t>

        <figure anchor="fig:ExampleCC"
                title="XML instance enabling Control-Client operation.">
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/examples/example-6.1.1.xml,68)

]]></artwork>
        </figure>

        <t>The following example shows a Control-Client with two instances of
        client/ctrl-connection, one called "RouterA" and another called
        "RouterB". Each TWAMP-Control connection is to a different Server. The
        control connection named "RouterA" has two test session requests. The
        TWAMP-Control connection named "RouterB" has no TWAMP-Test session
        requests.</t>

        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/examples/example-6.1.2.xml,68)

INSERT_TEXT_FROM_FILE(../src/examples/example-6.1.3.xml,68)

]]></artwork>
        </figure>
      </section>

      <section anchor="ExampleS" title="Server">
        <t><xref target="fig:ExampleS"/> shows a configuration example for a
        Server with server/admin-state enabled, which permits a device
        following <xref target="fig:scope2"/> to respond to TWAMP-Control
        connections and TWAMP-Test sessions.</t>

        <figure anchor="fig:ExampleS"
                title="XML instance enabling Server operation.">
          <artwork align="left"><![CDATA[
INSERT_TEXT_FROM_FILE(../src/examples/example-6.2.1.xml,68)

]]></artwork>
        </figure>

        <t>The following example presents a Server with the TWAMP-Control
        connection corresponding to the control connection name
        (client/ctrl-connection/name) "RouterA" presented in <xref
        target="ExampleCC"/>.</t>

        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/examples/example-6.2.2.xml,68)

INSERT_TEXT_FROM_FILE(../src/examples/example-6.2.3.xml,68)

]]></artwork>
        </figure>
      </section>

      <section anchor="ExampleSS" title="Session-Sender">
        <t><xref target="fig:ExampleSS"/> shows a configuration example for a
        Session-Sender with session-sender/admin-state enabled, which permits
        a device following <xref target="fig:scope2"/> to initiate TWAMP-Test
        sessions.</t>

        <figure anchor="fig:ExampleSS"
                title="XML instance enabling Session-Sender operation.">
          <artwork align="left"><![CDATA[
INSERT_TEXT_FROM_FILE(../src/examples/example-6.3.1.xml,68)

]]></artwork>
        </figure>

        <t>The following configuration example shows a Session-Sender with the
        two TWAMP-Test sessions presented in <xref target="ExampleCC"/>.</t>

        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/examples/example-6.3.2.xml,68)

]]></artwork>
        </figure>
      </section>

      <section anchor="ExampleSR" title="Session-Reflector">
        <t>This configuration example shows a Session-Reflector with
        session-reflector/admin-state enabled, which permits a device
        following <xref target="fig:scope2"/> to respond to TWAMP-Test
        sessions.</t>

        <figure anchor="fig:ExampleSR"
                title="XML instance enabling Session-Reflector operation.">
          <artwork align="left"><![CDATA[
INSERT_TEXT_FROM_FILE(../src/examples/example-6.4.1.xml,68)

]]></artwork>
        </figure>

        <t>The following example shows the two Session-Reflector TWAMP-Test
        sessions corresponding to the test sessions presented in <xref
        target="ExampleSS"/>.</t>

        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/examples/example-6.4.2.xml,68)

INSERT_TEXT_FROM_FILE(../src/examples/example-6.4.3.xml,68)

]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="security" title="Security Considerations">
      <t>The YANG module specified in <xref target="module"/> this document
      defines a schema for data that is designed to be accessed via network
      management protocols such as <xref target="RFC6241">NETCONF</xref> or
      <xref target="RFC8040">RESTCONF</xref>. The lowest <xref
      target="RFC6241">NETCONF</xref> layer is the secure transport layer, and
      the mandatory-to-implement secure transport is <xref
      target="RFC6242">Secure Shell (SSH)</xref>. The lowest RESTCONF layer is
      HTTPS, and the mandatory-to-implement secure transport is <xref
      target="RFC5246">TLS</xref>.</t>

      <t>The <xref target="RFC8341">NETCONF Access Control Module
      (NACM)</xref> provides the means to restrict access for particular
      NETCONF or RESTCONF users to a preconfigured subset of all available
      NETCONF or RESTCONF protocol operations and content..</t>

      <t>There are a number of nodes defined in this YANG module which are
      writeable. These data nodes may be considered sensitive and vulnerable
      to attacks in some network environments. Ability to write into these
      nodes without proper protection can have a negative effect on the
      devices that support this feature.</t>

      <t>Examples of nodes that are particularly vulnerable include several
      timeout values put in the protocol to protect against sessions that are
      not active but are consuming resources. Limiting access to these nodes
      will limit the ability to launch an attack in network environments.</t>
    </section>

    <section anchor="iana" title="IANA Considerations">
      <t>This document registers a URI in the <xref target="RFC3688">IETF XML
      registry </xref>. Following the format in <xref target="RFC3688">IETF
      XML Registry </xref>, the following registration is requested to be
      made.</t>

      <t>URI: urn:ietf:params:xml:ns:yang:ietf-twamp</t>

      <t>Registrant Contact: The IPPM WG of the IETF.</t>

      <t>XML: N/A, the requested URI is an XML namespace.</t>

      <t>This document registers a YANG module in the YANG Module Names
      registry <xref target="RFC6020">YANG </xref>.</t>

      <t>name: ietf-twamp</t>

      <t>namespace: urn:ietf:params:xml:ns:yang:ietf-twamp</t>

      <t>prefix: twamp</t>

      <t>reference: RFC XXXX</t>
    </section>

    <section anchor="acks" title="Acknowledgements">
      <t>We thank Fred Baker, Kevin D'Souza, Gregory Mirsky, Brian Trammell,
      Robert Sherman, and Marius Georgescu for their thorough and constructive
      reviews, comments and text suggestions.</t>

      <t>Haoxing Shen contributed to the definition of the YANG module in
      <xref target="module"/>.</t>

      <t>Jan Lindblad and Ladislav Lhokta did thorough reviews of the YANG
      module and the examples in <xref target="AuthExample"/>.</t>

      <t>Kostas Pentikousis was partially supported by FP7 UNIFY
      (http://fp7-unify.eu), a research project partially funded by the
      European Community under the Seventh Framework Program (grant agreement
      no. 619609). The views expressed here are those of the authors only. The
      European Commission is not liable for any use that may be made of the
      information in this document.</t>
    </section>

    <section anchor="contributors" title="Contributors">
      <t>Lianshu Zheng.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.1305'?>

      <?rfc include='reference.RFC.2119'?>

      <?rfc include='reference.RFC.2330'?>

      <?rfc include='reference.RFC.3432'?>

      <?rfc include='reference.RFC.3688'?>

      <?rfc include='reference.RFC.4086'?>

      <?rfc include='reference.RFC.4656'?>

      <?rfc include='reference.RFC.5357'?>

      <?rfc include='reference.RFC.6020'?>

      <?rfc include='reference.RFC.6038'?>

      <?rfc include='reference.RFC.6991'?>

      <?rfc include='reference.RFC.7312'?>

      <?rfc include='reference.RFC.7717'?>

      <?rfc include='reference.RFC.7950'?>

      <?rfc include='reference.RFC.8018'?>

      <?rfc include='reference.RFC.8174'?>

      <?rfc include='reference.I-D.ietf-ippm-port-twamp-test'?>

      <?rfc include='reference.I-D.ietf-ippm-metric-registry'?>
    </references>

    <references title="Informative References">
      <!--<?rfc include="reference.RFC.7398"?>-->

      <?rfc include='reference.RFC.5246'?>

      <?rfc include='reference.RFC.5618'?>

      <?rfc include='reference.RFC.5938'?>

      <?rfc include='reference.RFC.6241'?>

      <?rfc include='reference.RFC.6242'?>

      <?rfc include='reference.RFC.7426'?>

      <?rfc include='reference.RFC.8040'?>

      <?rfc include='reference.RFC.8341'?>

      <?rfc include='reference.RFC.8340'?>

      <?rfc include='reference.I-D.unify-nfvrg-challenges'?>

      <?rfc include='reference.I-D.unify-nfvrg-devops'?>

      <reference anchor="NSC">
        <front>
          <title>Research directions in network service chaining</title>

          <author>
            <organization>John, W., Pentikousis, K., et al.</organization>
          </author>

          <date month="November" year="2013"/>
        </front>

        <seriesInfo name="Proc. SDN for Future Networks and Services (SDN4FNS), Trento, Italy"
                    value="IEEE"/>
      </reference>
    </references>

    <section anchor="AuthExample" title="Detailed Data Model Examples">
      <t>This appendix extends the example presented in <xref
      target="examples"/> by configuring more fields such as authentication
      parameters, DSCP values and so on.</t>

      <section title="Control-Client">
        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/examples/example-a.1.1.xml,68)

INSERT_TEXT_FROM_FILE(../src/examples/example-a.1.2.xml,68)

]]></artwork>
        </figure>
      </section>

      <section title="Server">
        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/examples/example-a.2.1.xml,68)

INSERT_TEXT_FROM_FILE(../src/examples/example-a.2.2.xml,68)

]]></artwork>
        </figure>
      </section>

      <section title="Session-Sender">
        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/examples/example-a.3.1.xml,68)

]]></artwork>
        </figure>
      </section>

      <section title="Session-Reflector">
        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/examples/example-a.4.1.xml,68)

INSERT_TEXT_FROM_FILE(../src/examples/example-a.4.2.xml,68)

]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="OperationalCommands" title="TWAMP Operational Commands">
      <t>TWAMP operational commands could be performed programmatically or
      manually, e.g. using a command-line interface (CLI).</t>

      <t>With respect to programmability, YANG can be used to define NETCONF
      Remote Procedure Calls (RPC), therefore it would be, in principle,
      possible to define TWAMP RPC operations for actions such as starting or
      stopping control connections or test sessions or groups of sessions;
      retrieving results; clearing stored results, and so on.</t>

      <t>However, <xref target="RFC5357">TWAMP </xref> does not attempt to
      describe such operational actions. Refer also to <xref target="scope"/>
      and the unlabeled links in <xref target="fig:scope"/>. In actual
      deployments different TWAMP implementations may support different sets
      of operational commands, with different restrictions. Therefore, this
      document considers it the responsibility of the individual
      implementation to define its corresponding TWAMP operational commands
      data model.</t>
    </section>
  </back>
</rfc>
